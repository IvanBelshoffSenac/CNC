import * as cron from 'node-cron';
import { IcecService } from '../services/icec';
import { IcfService } from '../services/icf';
import { PeicService } from '../services/peic';

export class TaskOrchestrator {
    private isRunning: boolean = false;

    constructor() {
        console.log('üéØ Orquestrador de Tarefas inicializado');
        console.log('üìÖ Agendamentos configurados:');
        console.log('   ‚Ä¢ ICEC: Todo dia 1 √†s 02:00');
        console.log('   ‚Ä¢ ICF:  Todo dia 1 √†s 05:00');
        console.log('   ‚Ä¢ PEIC: Todo dia 1 √†s 08:00\n');
    }

    /**
     * Executa processamento individual do ICEC
     */
    private async runIcec(): Promise<void> {
        try {
            console.log('üìä [CRON] Iniciando ICEC (Mar√ßo/2012 ‚Üí presente)...');
            const icecService = new IcecService();
            await icecService.processAllIcecData(['BR', 'ES']);
            console.log('‚úÖ [CRON] ICEC conclu√≠do\n');
        } catch (error) {
            console.error('‚ùå [CRON] Erro no processamento ICEC:', error);
        }
    }

    /**
     * Executa processamento individual do ICF
     */
    private async runIcf(): Promise<void> {
        try {
            console.log('üìà [CRON] Iniciando ICF (Abril/2012 ‚Üí presente)...');
            const icfService = new IcfService();
            await icfService.processAllIcfData(['BR', 'ES']);
            console.log('‚úÖ [CRON] ICF conclu√≠do\n');
        } catch (error) {
            console.error('‚ùå [CRON] Erro no processamento ICF:', error);
        }
    }

    /**
     * Executa processamento individual do PEIC
     */
    private async runPeic(): Promise<void> {
        try {
            console.log('üìã [CRON] Iniciando PEIC (Mar√ßo/2012 ‚Üí m√™s passado)...');
            const peicService = new PeicService();
            await peicService.processAllPeicData(['BR', 'ES']);
            console.log('‚úÖ [CRON] PEIC conclu√≠do\n');
        } catch (error) {
            console.error('‚ùå [CRON] Erro no processamento PEIC:', error);
        }
    }

    /**
     * Executa todos os servi√ßos em sequ√™ncia (modo for√ßado)
     */
    public async runAllServicesNow(): Promise<void> {
        if (this.isRunning) {
            console.log('‚ö†Ô∏è  Processamento j√° em execu√ß√£o, aguarde a conclus√£o...');
            return;
        }

        console.log('üöÄ === INICIANDO PROCESSAMENTO FOR√áADO DE TODOS OS √çNDICES ===\n');
        const startTime = Date.now();
        this.isRunning = true;

        try {
            await this.runIcec();
            await this.runIcf();
            await this.runPeic();

            const endTime = Date.now();
            const duration = Math.round((endTime - startTime) / 1000 / 60);

            console.log('üéâ === PROCESSAMENTO FOR√áADO FINALIZADO ===');
            console.log(`‚è±Ô∏è  Tempo total: ${duration} minutos`);
            console.log('üìä Todos os √≠ndices foram processados e salvos no banco de dados');
            console.log('üíæ Dados hist√≥ricos desde 2012 at√© presente dispon√≠veis\n');

        } catch (error) {
            console.error('‚ùå Erro durante o processamento for√ßado:', error);
        } finally {
            this.isRunning = false;
        }
    }

    /**
     * Executa tarefa individual com controle de sobreposi√ß√£o
     */
    private async runTask(taskName: string, taskFunction: () => Promise<void>): Promise<void> {
        if (this.isRunning) {
            console.log(`‚ö†Ô∏è  [${taskName}] Tarefa ignorada - processamento em execu√ß√£o`);
            return;
        }

        console.log(`üïê [${taskName}] Iniciando execu√ß√£o agendada...`);
        const startTime = Date.now();
        this.isRunning = true;

        try {
            await taskFunction();
            const duration = Math.round((Date.now() - startTime) / 1000 / 60);
            console.log(`‚úÖ [${taskName}] Conclu√≠do em ${duration} minutos\n`);
        } catch (error) {
            console.error(`‚ùå [${taskName}] Erro:`, error);
        } finally {
            this.isRunning = false;
        }
    }

    /**
     * Inicia o orquestrador com agendamentos CRON
     */
    public startScheduler(): void {
        // ICEC: Todo dia 1 √†s 02:00
        cron.schedule('0 2 1 * *', async () => {
            await this.runTask('ICEC', () => this.runIcec());
        }, {
            timezone: "America/Sao_Paulo"
        });

        // ICF: Todo dia 1 √†s 05:00
        cron.schedule('0 5 1 * *', async () => {
            await this.runTask('ICF', () => this.runIcf());
        }, {
            timezone: "America/Sao_Paulo"
        });

        // PEIC: Todo dia 1 √†s 08:00
        cron.schedule('0 8 1 * *', async () => {
            await this.runTask('PEIC', () => this.runPeic());
        }, {
            timezone: "America/Sao_Paulo"
        });

        console.log('‚ö° Orquestrador ativo - aguardando pr√≥ximas execu√ß√µes...');
        console.log('üîÑ Para for√ßar execu√ß√£o imediata, use: npm run force\n');
    }

    /**
     * Retorna status da execu√ß√£o
     */
    public getStatus(): { isRunning: boolean; nextExecutions: string[] } {
        return {
            isRunning: this.isRunning,
            nextExecutions: [
                'ICEC: Pr√≥ximo dia 1 √†s 02:00',
                'ICF: Pr√≥ximo dia 1 √†s 05:00', 
                'PEIC: Pr√≥ximo dia 1 √†s 08:00'
            ]
        };
    }
}
