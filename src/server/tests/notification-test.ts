import { NotificationService } from '../services/notification';
import { IServiceResult, Metodo } from '../shared/interfaces';
import * as dotenv from 'dotenv';

dotenv.config();

class NotificationServiceTest {
    private notificationService: NotificationService;

    constructor() {
        this.notificationService = new NotificationService();
    }

    /**
     * Testa o m√©todo completo de envio de relat√≥rio
     */
    public async testarEnvioRelatorio(): Promise<void> {
        console.log('üß™ TESTE DO SERVI√áO DE NOTIFICA√á√ÉO - SISTEMA CNC');
        console.log('=' .repeat(60));
        console.log(`üïê Executado em: ${new Date().toLocaleString('pt-BR')}`);
        console.log(`üåç Ambiente: ${process.env.NODE_ENV || 'development'}`);
        
        try {
            // Criar dados simulados para teste
            const resultadosSimulados: IServiceResult[] = [
                {
                    servico: 'ICF',
                    periodoInicio: '01/2010',
                    periodoFim: '09/2025',
                    tempoExecucao: 180, // 3 minutos
                    totalRegistros: 150,
                    registrosPlanilha: 100,
                    registrosWebScraping: 50,
                    sucessos: 145,
                    falhas: 5,
                    tasks: [
                        {
                            mes: 1,
                            ano: 2024,
                            regiao: 'Brasil',
                            status: 'Sucesso',
                            servico: 'ICF',
                            metodo: Metodo.PLA,
                            layout: 'padr√£o',
                            inconsistenciaLayout: '',
                            erro: ''
                        },
                        {
                            mes: 2,
                            ano: 2024,
                            regiao: 'Sudeste',
                            status: 'Sucesso',
                            servico: 'ICF',
                            metodo: Metodo.WS,
                            layout: 'padr√£o',
                            inconsistenciaLayout: '',
                            erro: ''
                        },
                        {
                            mes: 3,
                            ano: 2024,
                            regiao: 'Sul',
                            status: 'Falha',
                            servico: 'ICF',
                            metodo: Metodo.PLA,
                            layout: 'inconsistente',
                            inconsistenciaLayout: 'Headers diferentes do padr√£o',
                            erro: 'Erro ao processar planilha'
                        }
                    ],
                    modoExecucao: 'For√ßado'
                }
            ];

            console.log('\nüìä Dados de teste preparados:');
            console.log(`   üìã Servi√ßos: ${resultadosSimulados.map(r => r.servico).join(', ')}`);
            console.log(`   üìà Total Registros: ${resultadosSimulados.reduce((t, r) => t + r.totalRegistros, 0)}`);
            console.log(`   ‚úÖ Taxa Sucesso: ${Math.round((resultadosSimulados.reduce((t, r) => t + r.sucessos, 0) / resultadosSimulados.reduce((t, r) => t + r.tasks.length, 0)) * 100)}%`);
            
            console.log('\n‚è≥ Enviando relat√≥rio de teste...');
            
            // Usar o m√©todo p√∫blico do servi√ßo de notifica√ß√£o
            await this.notificationService.enviarRelatorioCompleto(resultadosSimulados, 'For√ßado');
            
            console.log('\nüéâ TESTE DE NOTIFICA√á√ÉO CONCLU√çDO COM SUCESSO!');
            console.log('=' .repeat(50));
            console.log('‚úÖ Relat√≥rio enviado via email');
            console.log('üìß Planilha Excel gerada e anexada');
            console.log('üì® Email formatado em HTML');
            console.log('üéØ Servi√ßo de notifica√ß√£o funcionando corretamente');
            
            console.log('\nüìã VALIDA√á√ïES REALIZADAS:');
            console.log('   ‚úÖ Gera√ß√£o de planilhas Excel');
            console.log('   ‚úÖ Formata√ß√£o HTML do email');
            console.log('   ‚úÖ Processamento de destinat√°rios');
            console.log('   ‚úÖ Envio via SMTP');
            console.log('   ‚úÖ Limpeza de arquivos tempor√°rios');
            
            console.log('\nüìû PR√ìXIMOS PASSOS:');
            console.log('   1. Verificar se o email chegou na caixa de entrada');
            console.log('   2. Confirmar se a planilha Excel est√° anexada');
            console.log('   3. Validar formata√ß√£o HTML no email');
            console.log('   4. Sistema pronto para uso em produ√ß√£o');
            
        } catch (error) {
            console.log('\nüí• FALHA NO TESTE DE NOTIFICA√á√ÉO!');
            console.log('=' .repeat(50));
            console.error('‚ùå Erro detalhado:', error);
            
            if (error instanceof Error) {
                console.log(`üìù Mensagem: ${error.message}`);
                console.log(`üîç Tipo: ${error.name}`);
                
                // An√°lise espec√≠fica de erros
                if (error.message.includes('535')) {
                    console.log('\nüîê PROBLEMA DE AUTENTICA√á√ÉO SMTP:');
                    console.log('   ‚Ä¢ Verificar credenciais MAIL_USERNAME e MAIL_PASSWORD');
                    console.log('   ‚Ä¢ Confirmar autentica√ß√£o b√°sica no Microsoft 365');
                    console.log('   ‚Ä¢ Considerar usar App Password se MFA ativo');
                }
                
                if (error.message.includes('ENOENT') || error.message.includes('temp')) {
                    console.log('\nüìÅ PROBLEMA COM ARQUIVOS TEMPOR√ÅRIOS:');
                    console.log('   ‚Ä¢ Verificar permiss√µes de escrita no diret√≥rio temp');
                    console.log('   ‚Ä¢ Confirmar se o diret√≥rio temp existe');
                }
                
                if (error.message.includes('XLSX') || error.message.includes('Excel')) {
                    console.log('\nüìä PROBLEMA NA GERA√á√ÉO DE PLANILHAS:');
                    console.log('   ‚Ä¢ Verificar se a biblioteca xlsx est√° instalada');
                    console.log('   ‚Ä¢ Confirmar estrutura dos dados de entrada');
                }
            }
            
            console.log('\nüõ†Ô∏è SOLU√á√ïES RECOMENDADAS:');
            console.log('   1. Executar: npm run test:email (diagn√≥stico b√°sico)');
            console.log('   2. Verificar vari√°veis de ambiente (.env)');
            console.log('   3. Confirmar permiss√µes de escrita');
            console.log('   4. Validar instala√ß√£o das depend√™ncias');
            
            throw error;
        }
    }

    /**
     * Testa apenas a configura√ß√£o de destinat√°rios
     */
    public async testarConfiguracao(): Promise<void> {
        console.log('‚öôÔ∏è TESTE DE CONFIGURA√á√ÉO - EMAIL');
        console.log('=' .repeat(40));
        
        console.log('\nüìß Configura√ß√µes de Email:');
        console.log(`   HOST: ${process.env.EXCHANGE_HOST || 'n√£o configurado'}`);
        console.log(`   PORT: ${process.env.EXCHANGE_PORT || 'n√£o configurado'}`);
        console.log(`   USER: ${process.env.MAIL_USERNAME || 'n√£o configurado'}`);
        console.log(`   PASS: ${process.env.MAIL_PASSWORD ? '***configurado***' : 'n√£o configurado'}`);
        console.log(`   DEST: ${process.env.NOTIFICATION_EMAIL || 'usando padr√£o: ivan.belshoff@es.senac.br'}`);
        
        console.log('\n‚úÖ Configura√ß√£o verificada!');
    }
}

// Executar teste
const notificationTest = new NotificationServiceTest();

// Verificar argumentos da linha de comando
const comando = process.argv[2];

if (comando === 'config') {
    console.log('‚öôÔ∏è Executando teste de configura√ß√£o...');
    notificationTest.testarConfiguracao()
        .then(() => {
            console.log('\nüèÅ Teste de configura√ß√£o conclu√≠do!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('\nüí• Falha no teste de configura√ß√£o:', error);
            process.exit(1);
        });
} else {
    console.log('üìß Executando teste completo de notifica√ß√£o...');
    notificationTest.testarEnvioRelatorio()
        .then(() => {
            console.log('\nüèÅ Teste de notifica√ß√£o conclu√≠do com sucesso!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('\nüí• Falha no teste de notifica√ß√£o:', error);
            process.exit(1);
        });
}