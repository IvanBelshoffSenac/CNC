import axios from 'axios';
import * as XLSX from 'xlsx';
import * as fs from 'fs-extra';
import * as path from 'path';
import { chromium } from 'playwright';
import { icecRepository, metadadosIcecRepository } from '../database/repositories';
import { Icec, MetadadosIcec } from '../database/entities';
import { Regiao, Metodo, IErrorService, ITask, IServiceResult, IPeriod } from '../shared/interfaces';
import {
    generateServicePeriods,
    generateServicePeriodsWithIncremental,
    generateServicePeriodsWithGapDetection,
    extractServicePeriodRange,
    calculateExecutionTime,
    calculateTaskStats,
    cleanupServiceTempFolder,
    LogMessages,
    transformJsonToICEC,
} from '../shared/utils';
import { In } from 'typeorm';

export class IcecService {

    // ========================================
    // PROPRIEDADES E CONFIGURA√á√ïES
    // ========================================

    private readonly TEMP_DIR = path.join(__dirname, '../../../temp');
    private readonly TIMEOUT = 30000;
    private baseUrl = process.env.BASE_URL || 'https://backend.pesquisascnc.com.br/admin/4/upload';

    // ========================================
    // CONSTRUTOR E INICIALIZA√á√ÉO
    // ========================================

    constructor() {
        this.ensureTempDirectory();
    }

    /**
     * Inicializa e garante que o diret√≥rio tempor√°rio existe para armazenar arquivos
     */
    private async ensureTempDirectory(): Promise<void> {
        try {
            await fs.ensureDir(this.TEMP_DIR);
        } catch (error) {
            throw new Error(`Erro ao criar diret√≥rio tempor√°rio: ${error}`);
        }
    }

    // ========================================
    // SE√á√ÉO 1: M√âTODOS UTILIT√ÅRIOS E HELPERS
    // ========================================

    /**
     * Converte qualquer valor para string preservando o valor original
     * Trata valores nulos e indefinidos retornando string vazia
     */
    private parseValueToString(value: any): string {
        if (value === null || value === undefined) return '';
        return String(value);
    }

    /**
     * Constr√≥i a URL completa para download do arquivo Excel ICEC
     * @param mes M√™s do per√≠odo desejado (1-12)
     * @param ano Ano do per√≠odo desejado
     * @param regiao Regi√£o do arquivo (padr√£o: 'BR')
     * @returns URL completa do arquivo
     */
    private buildUrl(mes: number, ano: number, regiao: string = 'BR'): string {
        return `${this.baseUrl}/${mes}_${ano}/ICEC/${regiao}.xls`;
    }

    // ========================================
    // SE√á√ÉO 2: M√âTODOS DE ARQUIVOS E DOWNLOAD
    // ========================================

    /**
     * Localiza um arquivo de planilha Excel j√° baixado na pasta tempor√°ria
     * @param regiao Regi√£o do arquivo (ex: 'BR', 'SP')
     * @param mes M√™s do per√≠odo (1-12)
     * @param ano Ano do per√≠odo
     * @returns Caminho completo do arquivo se encontrado, null caso contr√°rio
     */
    private async findExistingExcelFile(regiao: string, mes: number, ano: number): Promise<string | null> {
        try {
            const files = await fs.readdir(this.TEMP_DIR);

            // Padr√£o do nome: icec_REGIAO_MESANO_timestamp.xls
            // Exemplo: icec_BR_62025_1735123456789.xls
            const pattern = `icec_${regiao}_${mes}${ano}_`;

            const matchingFile = files.find(file =>
                file.startsWith(pattern) && file.endsWith('.xls')
            );

            if (matchingFile) {
                const fullPath = path.join(this.TEMP_DIR, matchingFile);
                console.log(`üìÅ Arquivo encontrado: ${matchingFile}`);
                return fullPath;
            }

            console.log(`‚ö†Ô∏è Arquivo n√£o encontrado para padr√£o: ${pattern}*.xls`);
            return null;
        } catch (error) {
            console.log(`‚ùå Erro ao buscar arquivo: ${error}`);
            return null;
        }
    }

    /**
     * Realiza o download de um arquivo Excel ICEC do servidor remoto
     * @param url URL completa do arquivo a ser baixado
     * @param identifier Identificador √∫nico para nomenclatura do arquivo
     * @returns Caminho completo do arquivo baixado
     */
    private async downloadExcelFile(url: string, identifier: string): Promise<string> {
        const fileName = `icec_${identifier}_${Date.now()}.xls`;
        const filePath = path.join(this.TEMP_DIR, fileName);

        try {
            const response = await axios({
                method: 'GET',
                url: url,
                responseType: 'stream',
                timeout: this.TIMEOUT,
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
            });

            const writer = fs.createWriteStream(filePath);
            response.data.pipe(writer);

            return new Promise((resolve, reject) => {
                writer.on('finish', () => resolve(filePath));
                writer.on('error', reject);
            });
        } catch (error) {
            throw new Error(`Erro ao baixar arquivo ICEC (${identifier}): ${error}`);
        }
    }

    /**
     * Valida se o layout da planilha ICEC est√° conforme padr√µes estruturais conhecidos
     * Usa an√°lise de metadados extra√≠dos para identificar inconsist√™ncias de layout
     * @param filePath Caminho da planilha atual a ser validada
     * @returns Objeto com resultado da valida√ß√£o e detalhes das inconsist√™ncias
     */
    private async isExcelLayoutValid(filePath: string): Promise<{valid: boolean, inconsistencies?: string}> {
        try {
            console.log('üîç Validando layout ICEC baseado em padr√µes estruturais...');

            const metadados = await this.extractMetadataFromExcel(filePath);
            const inconsistencias: string[] = [];
            
            // PADR√ÉO 1: Total de metadados deve ser 62
            if (metadados.length !== 62) {
                const erro = `P1: Esperado 62 metadados, encontrado ${metadados.length}`;
                console.log(`‚ùå Padr√£o 1 falhou: ${erro}`);
                inconsistencias.push(erro);
            } else {
                console.log('‚úÖ Padr√£o 1: Total de metadados correto (62)');
            }

            // PADR√ÉO 2: Deve ter pelo menos 3 tipos de pesquisa √∫nicos (flex√≠vel para layouts antigos)
            const tiposPesquisa = new Set(metadados.map(m => m.TIPOPESQUISA).filter(t => t));
            const tiposDetectados = Array.from(tiposPesquisa);
            const tiposEsperados = ['ICAEC', 'IEEC', 'IIEC', 'ICEC'];
            
            // Para layouts antigos, aceitar pelo menos 3 tipos ou ter pelo menos os b√°sicos
            const temTiposBasicos = tiposDetectados.some(t => ['ICAEC', 'IEEC', 'IIEC'].includes(t));
            
            if (tiposPesquisa.size < 3 && !temTiposBasicos) {
                const erro = `P2: Esperado pelo menos 3 tipos de pesquisa ou tipos b√°sicos, encontrado [${tiposDetectados.join(', ')}]`;
                console.log(`‚ùå Padr√£o 2 falhou: ${erro}`);
                console.log(`üîç Tipos esperados: [${tiposEsperados.join(', ')}]`);
                inconsistencias.push(erro);
            } else {
                console.log(`‚úÖ Padr√£o 2: Tipos de pesquisa adequados (${tiposPesquisa.size} tipos: ${tiposDetectados.join(', ')})`);
            }

            // PADR√ÉO 3: Deve ter exatamente 4 √≠ndices "em Pontos" (um para cada tipo)
            const indicesEmPontos = metadados.filter(m => 
                m.CAMPO && (
                    m.CAMPO.includes('(em Pontos)') || 
                    m.CAMPO.includes('(Em Pontos)') ||
                    m.CAMPO === '√çndice (em Pontos)' ||
                    m.CAMPO === '√çndice (Em Pontos)'
                )
            );
            if (indicesEmPontos.length !== 4) {
                const erro = `P3: Esperado 4 √≠ndices em pontos, encontrado ${indicesEmPontos.length}`;
                console.log(`‚ùå Padr√£o 3 falhou: ${erro}`);
                console.log(`üîç Campos encontrados com "Pontos": ${indicesEmPontos.map(m => `${m.TIPOINDICE} - ${m.CAMPO}`).join(', ')}`);
                inconsistencias.push(erro);
            } else {
                console.log('‚úÖ Padr√£o 3: √çndices em pontos corretos (4)');
            }

            // PADR√ÉO 4: Deve ter pelo menos 16 se√ß√µes de varia√ß√£o mensal (4 tipos x 4 campos cada)
            // Layout antigo: pode ter "ICEC (√çndice Mensal)" ao inv√©s de "ICEC (Varia√ß√£o Mensal)"
            const variacaoMensal = metadados.filter(m => 
                m.TIPOINDICE && (
                    m.TIPOINDICE.includes('(Varia√ß√£o Mensal)') ||
                    m.TIPOINDICE.includes('(√çndice Mensal)') // Formato hist√≥rico 2012
                )
            );
            if (variacaoMensal.length < 12) { // Ajustado para 12 m√≠nimo (formato 2012)
                const erro = `P4: Esperado >=12 se√ß√µes de varia√ß√£o mensal, encontrado ${variacaoMensal.length}`;
                console.log(`‚ùå Padr√£o 4 falhou: ${erro}`);
                console.log(`üîç Se√ß√µes encontradas: ${variacaoMensal.map(m => m.TIPOINDICE).join(', ')}`);
                inconsistencias.push(erro);
            } else {
                console.log(`‚úÖ Padr√£o 4: Se√ß√µes de varia√ß√£o mensal suficientes (${variacaoMensal.length})`);
            }

            // PADR√ÉO 5: Tipos de √≠ndices essenciais devem existir (incluindo varia√ß√µes hist√≥ricas)
            const tiposEssenciais = [
                // Varia√ß√µes para "Condi√ß√£o Atual da Economia"
                'Condi√ß√£o Atual da Economia',
                'Condi√ß√µes Atuais da Economia', // Vers√£o 2012 (plural)
                
                // Varia√ß√µes para "Condi√ß√£o do Setor"  
                'Condi√ß√£o Atual do Setor',
                'Condi√ß√£o √£tual do Setor', // Note o acento diferente no √£
                'Condi√ß√µes Atuais do Setor', // Vers√£o 2012 (plural)
                
                // Varia√ß√µes para "Condi√ß√£o da Empresa"
                'Condi√ß√£o Atual da Empresa',
                'Condi√ß√µes Atuais da Empresa', // Vers√£o 2012 (plural)
                
                // Varia√ß√µes para "Expectativa para Economia"
                'Expectativa para Economia',
                'Expectativa para a Economia', // Vers√£o 2012 (com "a")
                'Expectativa para Economia Brasileira',
                
                // Demais se√ß√µes essenciais
                'Expectativa para Setor',
                'Expectativa para Empresa',
                'Expectativa Contrata√ß√£o',
                'N√≠vel de Investimento',
                'Situa√ß√£o Atual dos Estoques'
            ];
            
            // Tipos √∫nicos encontrados nos metadados (sem varia√ß√£o mensal)
            const tiposUnicos = new Set(metadados
                .map(m => m.TIPOINDICE)
                .filter(t => t && !t.includes('(Varia√ß√£o Mensal)'))
            );
            
            // Verificar quantos tipos essenciais foram encontrados
            let gruposEncontrados = 0;
            const tiposFaltando: string[] = [];
            
            const gruposEssenciais = [
                ['Condi√ß√£o Atual da Economia', 'Condi√ß√µes Atuais da Economia'],
                ['Condi√ß√£o Atual do Setor', 'Condi√ß√£o √£tual do Setor', 'Condi√ß√µes Atuais do Setor'],
                ['Condi√ß√£o Atual da Empresa', 'Condi√ß√µes Atuais da Empresa'],
                ['Expectativa para Economia', 'Expectativa para a Economia', 'Expectativa para Economia Brasileira'],
                ['Expectativa para Setor'],
                ['Expectativa para Empresa'],
                ['Expectativa Contrata√ß√£o'],
                ['N√≠vel de Investimento'],
                ['Situa√ß√£o Atual dos Estoques']
            ];
            
            for (const grupo of gruposEssenciais) {
                const encontrado = grupo.some(variacao => 
                    Array.from(tiposUnicos).some(tipo => tipo.includes(variacao))
                );
                
                if (encontrado) {
                    gruposEncontrados++;
                } else {
                    tiposFaltando.push(grupo[0]); // Usar a primeira varia√ß√£o como refer√™ncia
                }
            }
            
            if (gruposEncontrados < 6) {
                const erro = `P5: Esperado >=6 tipos essenciais, encontrado ${gruposEncontrados}. Faltando: ${tiposFaltando.join(', ')}`;
                console.log(`‚ùå Padr√£o 5 falhou: ${erro}`);
                console.log(`üîç Tipos √∫nicos encontrados: ${Array.from(tiposUnicos).join(', ')}`);
                inconsistencias.push(erro);
            } else {
                console.log(`‚úÖ Padr√£o 5: Tipos de √≠ndices essenciais presentes (${gruposEncontrados}/9 grupos)`);
            }

            // PADR√ÉO 6: Deve ter dados num√©ricos v√°lidos nos √≠ndices finais
            const indicesFinais = metadados.filter(m => 
                m.CAMPO === '√çndice (em Pontos)' || m.CAMPO === '√çndice'
            );
            
            let indicesComDados = 0;
            for (const indice of indicesFinais) {
                const total = parseFloat(indice.TOTAL);
                if (!isNaN(total) && total > 10 && total < 300) { // Ajustado range baseado nos dados reais
                    indicesComDados++;
                }
            }
            
            if (indicesComDados < 4) {
                const erro = `P6: Esperado >=4 √≠ndices com dados v√°lidos, encontrado ${indicesComDados}`;
                console.log(`‚ùå Padr√£o 6 falhou: ${erro}`);
                console.log(`üîç √çndices encontrados: ${indicesFinais.map(i => `${i.TIPOINDICE} - ${i.CAMPO}: ${i.TOTAL}`).join(', ')}`);
                inconsistencias.push(erro);
            } else {
                console.log(`‚úÖ Padr√£o 6: √çndices com dados num√©ricos v√°lidos (${indicesComDados})`);
            }

            // PADR√ÉO 7: Estrutura de campos por tipo de √≠ndice
            const camposEsperados = ['Melhoram muito', 'Melhoram', 'Melhorar muito', 'Melhorar', 'Pioram', 'Piorar', '√çndice', 'Adequada', 'Acima', 'Abaixo'];
            const tiposComEstrutura = metadados.reduce((acc, m) => {
                if (!acc[m.TIPOINDICE]) acc[m.TIPOINDICE] = new Set();
                acc[m.TIPOINDICE].add(m.CAMPO);
                return acc;
            }, {} as Record<string, Set<string>>);

            let tiposComEstruturaCorreta = 0;
            Object.entries(tiposComEstrutura).forEach(([tipo, campos]) => {
                if (tipo && !tipo.includes('(Varia√ß√£o Mensal)')) {
                    const temEstruturaPadrao = Array.from(campos).some(campo => 
                        camposEsperados.some(esperado => 
                            campo.toLowerCase().includes(esperado.toLowerCase())
                        )
                    );
                    if (temEstruturaPadrao) tiposComEstruturaCorreta++;
                }
            });

            if (tiposComEstruturaCorreta < 6) {
                const erro = `P7: Esperado >=6 tipos com estrutura padr√£o, encontrado ${tiposComEstruturaCorreta}`;
                console.log(`‚ùå Padr√£o 7 falhou: ${erro}`);
                console.log(`üîç Tipos sem varia√ß√£o mensal: ${Object.keys(tiposComEstrutura).filter(t => t && !t.includes('(Varia√ß√£o Mensal)')).join(', ')}`);
                inconsistencias.push(erro);
            } else {
                console.log(`‚úÖ Padr√£o 7: Estrutura de campos adequada (${tiposComEstruturaCorreta} tipos)`);
            }

            if (inconsistencias.length === 0) {
                console.log('‚úÖ Todos os padr√µes estruturais validados com sucesso!');
                return { valid: true };
            } else {
                return { valid: false, inconsistencies: inconsistencias.join(' | ') };
            }
            
        } catch (error) {
            console.log(`‚ùå Erro ao validar layout da planilha ICEC: ${error}`);
            // Em caso de erro, assumir layout inconsistente para investiga√ß√£o
            return { valid: false, inconsistencies: `Erro na valida√ß√£o: ${error}` };
        }
    }    // ========================================
    // SE√á√ÉO 3: M√âTODOS DE METADADOS
    // ========================================

    /**
     * Vers√£o adaptada do transformJsonToICEC que lida com m√∫ltiplos layouts hist√≥ricos
     * Suporta layouts de 2012 (plural) at√© 2025 (singular + layout quebrado)
     * - Layout 2012: "Condi√ß√µes Atuais da Economia" (plural)
     * - Layout atual: "Condi√ß√£o Atual da Economia" (singular) 
     * - Layout quebrado 2025: cabe√ßalhos com zeros
     */
    private transformJsonToICEC(jsonData: any[][]): any {
        const result: any[] = [];
        let currentTipo: any | null = null;
        let currentTipoPesquisa: string = '';

        // Fun√ß√£o helper para verificar se √© a primeira linha inv√°lida (com nulls e "Porte")
        const isInvalidFirstLine = (row: any[]): boolean => {
            return row[0] === null && row[1] === null && row[2] === "Porte";
        };

        // Fun√ß√£o para normalizar nomes de se√ß√µes hist√≥ricas
        const normalizeSectionName = (name: string): string => {
            if (!name || typeof name !== 'string') return name;
            
            // Normalizar varia√ß√µes hist√≥ricas para formato padr√£o
            const normalizations: Record<string, string> = {
                // Condi√ß√µes Atuais -> Condi√ß√£o Atual (plural para singular)
                'Condi√ß√µes Atuais da Economia': 'Condi√ß√£o Atual da Economia',
                'Condi√ß√µes Atuais do Setor (Com√©rcio)': 'Condi√ß√£o Atual do Setor (Com√©rcio)',
                'Condi√ß√µes Atuais da Empresa': 'Condi√ß√£o Atual da Empresa',
                
                // Expectativas com "a" -> sem "a"
                'Expectativa para a Economia': 'Expectativa para Economia',
                'Expectativa para a Economia Brasileira': 'Expectativa para Economia Brasileira',
                
                // Varia√ß√µes com "√£" e "√†"
                'Condi√ß√£o √£tual do Setor (Com√©rcio)': 'Condi√ß√£o Atual do Setor (Com√©rcio)',
                
                // Varia√ß√µes de contrata√ß√£o
                'Expectativa Contrata√ß√£o de Funcion√°rios': 'Expectativa Contrata√ß√£o de Funcion√°rio',
                'Expectativa Contrata√ß√£o de Funcion√°rio': 'Expectativa Contrata√ß√£o de Funcion√°rio',
                
                // Varia√ß√µes de se√ß√µes de varia√ß√£o mensal (formato hist√≥rico 2012)
                'ICEC (√çndice Mensal)': 'ICEC (Varia√ß√£o Mensal)'
            };
            
            // Aplicar normaliza√ß√£o se existir
            return normalizations[name] || name;
        };

        // Fun√ß√£o para extrair o tipo de pesquisa da coluna 7 do cabe√ßalho
        const extractTipoPesquisa = (row: any[]): string => {
            if (row[7] && typeof row[7] === 'string') {
                const text = row[7].toString();
                if (text.includes('ICAEC')) return 'ICAEC';
                if (text.includes('IEEC')) return 'IEEC';
                if (text.includes('IIEC')) return 'IIEC';
                if (text.includes('ICEC')) return 'ICEC';
            }
            return currentTipoPesquisa;
        };

        // Fun√ß√£o para inferir tipo de pesquisa baseado no nome da se√ß√£o (para layouts antigos sem identificadores)
        const inferTipoPesquisaFromSectionName = (sectionName: string): string => {
            if (!sectionName || typeof sectionName !== 'string') return '';
            
            const normalized = sectionName.toLowerCase().trim();
            
            // Mapeamento baseado nos padr√µes hist√≥ricos identificados (2016 e anteriores)
            const mappings = {
                // ICAEC - √çndice de Condi√ß√µes Atuais da Economia do Com√©rcio
                'condi√ß√£o atual da economia': 'ICAEC',
                'condi√ß√µes atuais da economia': 'ICAEC',
                'condicoes atuais da economia': 'ICAEC', // sem acento, formato 2016
                'condi√ß√£o atual do setor': 'ICAEC',
                'condi√ß√µes atuais do setor': 'ICAEC',
                'condicoes atuais do setor': 'ICAEC',
                
                // IEEC - √çndice de Expectativas da Economia do Com√©rcio  
                'condi√ß√£o atual da empresa': 'IEEC',
                'condi√ß√µes atuais da empresa': 'IEEC',
                'expectativa para economia brasileira': 'IEEC',
                'expectativa para economia': 'IEEC',
                'expectativa para empresa': 'IEEC',
                
                // IIEC - √çndice de Investimento Esperado do Com√©rcio
                'expectativa para setor': 'IIEC',
                'expectativa para setor (com√©rcio)': 'IIEC',
                'expectativas para contrata√ß√£o': 'IIEC',
                'expectativas para contrata√ß√£o de funcion√°rios': 'IIEC',
                'expectativa contrata√ß√£o': 'IIEC',
                'n√≠vel de investimento': 'IIEC',
                'situa√ß√£o atual dos estoques': 'IIEC',
                
                // ICEC - √çndice de Confian√ßa do Empres√°rio do Com√©rcio (√≠ndice geral)
                'icec': 'ICEC',
                'icec (√≠ndice mensal)': 'ICEC',
                'icec (varia√ß√£o mensal)': 'ICEC',
                '√≠ndice': 'ICEC',
                '√≠ndice (varia√ß√£o mensal)': 'ICEC',
                '√≠ndice (em pontos)': 'ICEC'
            };
            
            // Busca correspond√™ncia exata primeiro
            if (mappings[normalized]) {
                return mappings[normalized];
            }
            
            // Busca por correspond√™ncia parcial para casos com varia√ß√µes de formato
            for (const [pattern, type] of Object.entries(mappings)) {
                if (normalized.includes(pattern)) {
                    return type;
                }
            }
            
            // Fallback: busca por c√≥digos diretos no nome
            if (normalized.includes('icaec')) return 'ICAEC';
            if (normalized.includes('ieec')) return 'IEEC';
            if (normalized.includes('iiec')) return 'IIEC';
            if (normalized.includes('icec')) return 'ICEC';
            
            return '';
        };

        // Fun√ß√£o para identificar cabe√ßalhos de varia√ß√£o mensal com layout quebrado
        const isVariacaoMensalQuebraHeader = (row: any[]): boolean => {
            // Novo formato: linha tem nome da categoria e depois zeros
            const nomeCategoria = row[0];
            if (!nomeCategoria || typeof nomeCategoria !== 'string') return false;

            // Verificar se √© uma das categorias de varia√ß√£o mensal conhecidas
            const isVariacaoMensal = nomeCategoria.includes('(Varia√ß√£o Mensal)');

            // Verificar se as pr√≥ximas colunas s√£o zeros
            const hasZeros = row[1] === 0 && row[2] === 0 && row[3] === 0;

            return isVariacaoMensal && hasZeros;
        };

        for (let i = 0; i < jsonData.length; i++) {
            const row = jsonData[i];

            // Ignorar linha inv√°lida do in√≠cio
            if (isInvalidFirstLine(row)) {
                continue;
            }

            // Verifica se √© uma linha de cabe√ßalho (nova categoria)
            // Tipo 1: Categorias normais com "total - em %"
            // Tipo 2: Categorias de varia√ß√£o mensal com "Total" (formato antigo)
            // Tipo 3: Categorias de varia√ß√£o mensal com zeros (formato novo/quebrado)
            const isNormalHeader = row[1] === "total - em %" && row[2] === "Empresas com at√© 50 empregados" && row[3] === "Empresas com mais de 50 empregados";
            const isVariacaoMensalHeader = row[1] === "Total" && row[2] === "Empresas com at√© 50 empregados" && row[3] === "Empresas com mais de 50 empregados";
            const isVariacaoMensalQuebraHeaderDetected = isVariacaoMensalQuebraHeader(row);

            if (isNormalHeader || isVariacaoMensalHeader || isVariacaoMensalQuebraHeaderDetected) {
                // Se j√° existe um tipo atual, adiciona ao resultado
                if (currentTipo) {
                    result.push(currentTipo);
                }

                // Extrai o tipo de pesquisa do cabe√ßalho (m√©todo principal)
                let tipoPesquisa = extractTipoPesquisa(row);
                
                // Se n√£o encontrou pela coluna 7, tenta inferir pelo nome da se√ß√£o (layouts antigos)
                if (!tipoPesquisa) {
                    tipoPesquisa = inferTipoPesquisaFromSectionName(row[0]);
                }
                
                // Atualiza o tipo de pesquisa atual
                if (tipoPesquisa) {
                    currentTipoPesquisa = tipoPesquisa;
                }

                // Cria novo tipo com normaliza√ß√£o hist√≥rica
                currentTipo = {
                    tipo: normalizeSectionName(row[0]),
                    valores: []
                };
            } else if (currentTipo && row[0] && row[1] !== undefined) {

                // Verifica se √© um √≠ndice verdadeiro
                const isIndice = (row[0] === "√çndice" || row[0] === "√çndice (em Pontos)");

                // Adiciona o valor (seja √≠ndice ou n√£o) com o tipo de pesquisa atual
                currentTipo.valores.push({
                    tipo: row[0],
                    indice: isIndice,
                    total: row[1] || '',
                    "Empresas com at√© 50 empregados": row[2] || '',
                    "Empresas com mais de 50 empregados": row[3] || '',
                    semiduraveis: row[4] || '',
                    nao_duraveis: row[5] || '',
                    duraveis: row[6] || '',
                    tipopesquisa: currentTipoPesquisa
                });
            }
        }

        // Adiciona o √∫ltimo tipo se existir
        if (currentTipo) {
            result.push(currentTipo);
        }

        return {
            icectableTipo: result
        };
    }

    /**
     * Extrai metadados completos de uma planilha ICEC utilizando fun√ß√£o otimizada e adaptada
     * Processa todos os tipos de √≠ndices e seus respectivos valores
     * Compat√≠vel com ambos os layouts: antigo (at√© m√™s 8) e novo (a partir do m√™s 9)
     * @param filePath Caminho completo da planilha Excel
     * @returns Array de objetos MetadadosIcec com todos os dados estruturados
     */
    private async extractMetadataFromExcel(filePath: string): Promise<MetadadosIcec[]> {
        try {
            const workbook = XLSX.readFile(filePath);
            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];
            const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: null }) as any[][];

            // Usar a fun√ß√£o adaptada para extrair dados estruturados (compat√≠vel com layout quebrado)
            const icecCompleta = this.transformJsonToICEC(jsonData);

            // Converter para o formato MetadadosIcec
            const metadados: MetadadosIcec[] = [];

            for (const tipo of icecCompleta.icectableTipo) {
                for (const valor of tipo.valores) {
                    const metadado = new MetadadosIcec();
                    metadado.TIPOINDICE = tipo.tipo;
                    metadado.CAMPO = valor.tipo;

                    // Salvar dados brutos como string
                    metadado.TOTAL = this.parseValueToString(valor.total);
                    metadado.EMPRESAS_COM_AT√â_50_EMPREGADOS = this.parseValueToString(valor["Empresas com at√© 50 empregados"]);
                    metadado.EMPRESAS_COM_MAIS_DE_50_EMPREGADOS = this.parseValueToString(valor["Empresas com mais de 50 empregados"]);
                    metadado.SEMIDURAVEIS = this.parseValueToString(valor.semiduraveis);
                    metadado.NAO_DURAVEIS = this.parseValueToString(valor.nao_duraveis);
                    metadado.DURAVEIS = this.parseValueToString(valor.duraveis);
                    metadado.INDICE = valor.indice;
                    metadado.TIPOPESQUISA = valor.tipopesquisa;

                    metadados.push(metadado);
                }
            }

            console.log(`üìä Metadados extra√≠dos: ${metadados.length} registros processados`);
            return metadados;

        } catch (error) {
            throw new Error(`Erro ao extrair metadados da planilha ICEC: ${error}`);
        }
    }

    /**
     * Processa extra√ß√£o de metadados para todos os registros ICEC obtidos via planilha
     * Localiza arquivos j√° baixados e extrai metadados detalhados
     * @param idsIcec Array com IDs dos registros ICEC para processamento de metadados
     */
    private async processMetadataForPlanilhaRecords(idsIcec: string[]): Promise<void> {
        try {
            // 1. Filtrar todos os registros de ICEC do m√©todo 'Planilha'
            const registrosPlanilha = await icecRepository.find({
                where: { id: In(idsIcec) },
                order: { ANO: 'ASC', MES: 'ASC' }
            });

            const registrosMetadados = await metadadosIcecRepository.find({
                relations: {
                    icec: true
                }
            });

            if (registrosPlanilha.length === 0) {
                console.log('‚ÑπÔ∏è Nenhum registro ICEC do tipo Planilha encontrado');
                return;
            }

            console.log(`üìä Encontrados ${registrosPlanilha.length} registros ICEC do tipo Planilha`);

            interface IPeriodRegion extends IPeriod {
                regiao: Regiao;
            }

            // 2. Mapear os registros para extrair per√≠odos √∫nicos por regi√£o
            const periodosMap = new Map<string, IPeriodRegion>();

            for (const registro of registrosPlanilha) {
                const chaveperiodo = `${registro.MES}-${registro.ANO}-${registro.REGIAO}`;
                if (!periodosMap.has(chaveperiodo)) {
                    periodosMap.set(chaveperiodo, {
                        mes: registro.MES,
                        ano: registro.ANO,
                        regiao: registro.REGIAO
                    });
                }
            }

            const periodos: IPeriodRegion[] = Array.from(periodosMap.values());
            console.log(`üìÖ Per√≠odos √∫nicos identificados: ${periodos.length}`);

            // 3. Para cada per√≠odo/regi√£o, localizar a planilha j√° baixada e processar metadados
            for (const periodo of periodos) {
                try {
                    console.log(`üì• Processando metadados para per√≠odo ${periodo.regiao} ${periodo.mes.toString().padStart(2, '0')}/${periodo.ano}...`);

                    // Localizar arquivo j√° baixado na pasta tempor√°ria
                    const filePath = await this.findExistingExcelFile(periodo.regiao, periodo.mes, periodo.ano);

                    if (!filePath) {
                        console.log(`‚ö†Ô∏è Arquivo n√£o encontrado para per√≠odo ${periodo.regiao} ${periodo.mes.toString().padStart(2, '0')}/${periodo.ano}, pulando metadados...`);
                        continue;
                    }

                    // Extrair metadados da planilha existente
                    const metadados = await this.extractMetadataFromExcel(filePath);

                    if (metadados.length > 0) {
                        // Encontrar registros ICEC que correspondem a este per√≠odo/regi√£o
                        const registrosDoperiodo = registrosPlanilha.filter(
                            (r) => r.MES === periodo.mes && r.ANO === periodo.ano && r.REGIAO === periodo.regiao
                        );

                        for (const registro of registrosDoperiodo) {
                            // Verificar se j√° existem metadados para este registro
                            const metadadosExistentes = registrosMetadados.filter(
                                (m) => m.icec && m.icec.id === registro.id
                            );

                            if (metadadosExistentes.length === 0) {
                                // Salvar metadados individualmente
                                await this.saveIndividualMetadataToDatabase([...metadados], registro);
                                console.log(`‚úÖ Metadados salvos para ICEC ID: ${registro.id} (${periodo.regiao} ${periodo.mes.toString().padStart(2, '0')}/${periodo.ano})`);
                            } else {
                                console.log(`‚ÑπÔ∏è Metadados j√° existem para ICEC ID: ${registro.id} (${periodo.regiao} ${periodo.mes.toString().padStart(2, '0')}/${periodo.ano})`);
                            }
                        }
                    } else {
                        console.log(`‚ö†Ô∏è Nenhum metadado extra√≠do para per√≠odo ${periodo.regiao} ${periodo.mes.toString().padStart(2, '0')}/${periodo.ano}`);
                    }

                } catch (error) {
                    console.log(`‚ùå Erro ao processar metadados para per√≠odo ${periodo.regiao} ${periodo.mes.toString().padStart(2, '0')}/${periodo.ano}: ${error}`);
                }
            }

            console.log('‚úÖ Processamento de metadados ICEC conclu√≠do');

        } catch (error) {
            console.error('‚ùå Erro no processamento de metadados ICEC:', error);
            throw error;
        }
    }

    // ========================================
    // SE√á√ÉO 4: M√âTODOS DE BANCO DE DADOS
    // ========================================

    /**
     * Obt√©m o √∫ltimo per√≠odo (ANO e M√äS) registrado no banco de dados para ICEC
     * Usado no modo incremental para determinar o ponto de in√≠cio da coleta
     * @returns Objeto com mes e ano do √∫ltimo registro, ou null se n√£o houver registros
     */
    private async getLastIcecPeriod(): Promise<IPeriod | null> {
        try {
            // Buscar o √∫ltimo registro usando query builder para ter mais controle
            const lastRecord = await icecRepository
                .createQueryBuilder('icec')
                .select(['icec.MES', 'icec.ANO'])
                .orderBy('icec.ANO', 'DESC')
                .addOrderBy('icec.MES', 'DESC')
                .limit(1)
                .getOne();

            if (!lastRecord) {
                console.log('‚ÑπÔ∏è Nenhum registro ICEC encontrado no banco de dados');
                return null;
            }

            console.log(`üìÖ √öltimo per√≠odo ICEC no banco: ${lastRecord.MES.toString().padStart(2, '0')}/${lastRecord.ANO}`);
            return {
                mes: lastRecord.MES,
                ano: lastRecord.ANO
            };

        } catch (error) {
            console.error('‚ùå Erro ao buscar √∫ltimo per√≠odo ICEC:', error);
            return null;
        }
    }

    /**
     * Obt√©m todos os per√≠odos √∫nicos (ANO e M√äS) existentes no banco de dados para ICEC
     * Usado no modo incremental para detectar lacunas nos dados
     * @returns Array de per√≠odos existentes no banco ou array vazio se n√£o houver registros
     */
    private async getAllExistingIcecPeriods(): Promise<IPeriod[]> {
        try {
            const existingRecords = await icecRepository
                .createQueryBuilder('icec')
                .select(['icec.MES', 'icec.ANO'])
                .distinct(true)
                .orderBy('icec.ANO', 'ASC')
                .addOrderBy('icec.MES', 'ASC')
                .getMany();

            const periods: IPeriod[] = existingRecords.map(record => ({
                mes: record.MES,
                ano: record.ANO
            }));

            console.log(`üìä Total de per√≠odos √∫nicos no banco ICEC: ${periods.length}`);
            if (periods.length > 0) {
                const primeiro = periods[0];
                const ultimo = periods[periods.length - 1];
                console.log(`üìÖ Primeiro per√≠odo: ${primeiro.mes.toString().padStart(2, '0')}/${primeiro.ano}`);
                console.log(`üìÖ √öltimo per√≠odo: ${ultimo.mes.toString().padStart(2, '0')}/${ultimo.ano}`);
            }

            return periods;

        } catch (error) {
            console.error('‚ùå Erro ao buscar per√≠odos existentes ICEC:', error);
            return [];
        }
    }

    /**
     * Salva um √∫nico registro ICEC no banco de dados
     * Utilizado para evitar problemas de performance em produ√ß√£o com grandes volumes
     * @param icecData Objeto Icec para ser salvo
     * @returns ID do registro salvo
     */
    private async saveIndividualIcecToDatabase(icecData: Icec): Promise<string> {
        try {
            const icecEntity = new Icec();
            icecEntity.ICEC = icecData.ICEC;
            icecEntity.AT√â_50 = icecData.AT√â_50;
            icecEntity.MAIS_DE_50 = icecData.MAIS_DE_50;
            icecEntity.SEMIDURAVEIS = icecData.SEMIDURAVEIS;
            icecEntity.NAO_DURAVEIS = icecData.NAO_DURAVEIS;
            icecEntity.DURAVEIS = icecData.DURAVEIS;
            icecEntity.MES = icecData.MES;
            icecEntity.ANO = icecData.ANO;
            icecEntity.REGIAO = icecData.REGIAO;
            icecEntity.METODO = icecData.METODO;

            const savedEntity = await icecRepository.save(icecEntity);
            console.log(`üíæ Registro ICEC salvo: ${icecData.REGIAO} ${icecData.MES.toString().padStart(2, '0')}/${icecData.ANO}`);

            return savedEntity.id!;
        } catch (error) {
            throw new Error(`Erro ao salvar registro ICEC individual no banco: ${error}`);
        }
    }

    /**
     * Salva metadados individuais no banco de dados
     * Vincula cada metadado ao seu respectivo registro ICEC
     * @param metadados Array de metadados para salvar
     * @param icecEntity Registro ICEC para vincula√ß√£o
     */
    private async saveIndividualMetadataToDatabase(
        metadados: MetadadosIcec[],
        icecEntity: Icec
    ): Promise<void> {
        try {
            if (metadados.length === 0) {
                return;
            }

            // Vincular cada metadado ao registro ICEC
            const metadatosToSave: MetadadosIcec[] = [];
            for (const metadado of metadados) {
                metadado.icec = icecEntity;
                metadatosToSave.push(metadado);
            }

            // Salvar metadados
            await metadadosIcecRepository.save(metadatosToSave);
            console.log(`üìä ${metadatosToSave.length} metadados salvos para ICEC ID: ${icecEntity.id}`);

        } catch (error) {
            throw new Error(`Erro ao salvar metadados individuais no banco: ${error}`);
        }
    }

    /**
     * Remove todos os dados ICEC e metadados do banco de dados
     * Respeita a ordem de exclus√£o para manter integridade referencial
     * Apenas executa limpeza quando PROCESSING_METHOD for 'Truncate and Load'
     * @returns String com log das opera√ß√µes realizadas
     */
    private async cleanDatabase(): Promise<string> {
        const processingMethod = process.env.PROCESSING_METHOD?.trim().replace(/'/g, '') || 'Incremental';
        
        if (processingMethod === 'Incremental') {
            const message = 'üîÑ Modo incremental ativo - mantendo dados existentes no banco';
            console.log(message);
            return `${message}\n`;
        }

        try {
            const logMessages: string[] = [];
            console.log('üßπ Modo Truncate and Load - limpando base de dados ICEC...');

            // Limpar metadados primeiro (respeitando foreign key constraint)
            console.log('üßπ Limpando metadados ICEC...');
            await metadadosIcecRepository.createQueryBuilder()
                .delete()
                .from(MetadadosIcec)
                .execute();
            logMessages.push('‚úÖ Metadados ICEC limpos com sucesso');

            // Limpar registros ICEC
            console.log('üßπ Limpando registros ICEC...');
            await icecRepository.createQueryBuilder()
                .delete()
                .from(Icec)
                .execute();
            logMessages.push('‚úÖ Registros ICEC limpos com sucesso');

            return logMessages.join('\n') + '\n';

        } catch (error) {
            return `Erro ao limpar a base de dados ICEC: ${error}\n`;
        }
    }

    // ========================================
    // SE√á√ÉO 5: M√âTODOS DE PROCESSAMENTO DE DADOS
    // ========================================

    /**
     * Extrai os dados completos ICEC de uma planilha Excel
     * Busca especificamente pela linha que cont√©m '√çndice (em Pontos)' que representa os dados finais do ICEC
     * @param filePath Caminho completo do arquivo Excel a ser processado
     * @returns Objeto Icec com todos os dados extra√≠dos (valores como string)
     */
    private async extractCompleteDataFromExcel(filePath: string): Promise<Icec> {
        try {
            const workbook = XLSX.readFile(filePath);
            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];
            const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: null }) as any[][];

            // Buscar linha com '√çndice (em Pontos)' - que √© a √∫ltima linha do ICEC
            let icecRow: any[] | null = null;

            for (let i = jsonData.length - 1; i >= 0; i--) {
                const row = jsonData[i];
                if (row && row[0]) {
                    const cellValue = row[0].toString().toLowerCase();
                    if (cellValue.includes('√≠ndice (em pontos)')) {
                        icecRow = row;
                        break;
                    }
                }
            }

            if (!icecRow) {
                throw new Error('Linha com dados ICEC n√£o encontrada');
            }

            // Extrair valores como string preservando o valor original (colunas 1-6: Total, At√© 50, Mais de 50, Semidur√°veis, N√£o dur√°veis, Dur√°veis)
            const stringData = icecRow.slice(1, 7).map(val => String(val || ''));

            return {
                ICEC: stringData[0],
                AT√â_50: stringData[1],
                MAIS_DE_50: stringData[2],
                SEMIDURAVEIS: stringData[3],
                NAO_DURAVEIS: stringData[4],
                DURAVEIS: stringData[5],
                MES: 0, // Ser√° definido posteriormente
                ANO: 0, // Ser√° definido posteriormente
                REGIAO: 'BR' as any, // Ser√° definido posteriormente
                METODO: Metodo.PLA
            };
        } catch (error) {
            throw new Error(`Erro ao processar arquivo ICEC: ${error}`);
        }
    }

    // ========================================
    // SE√á√ÉO 6: M√âTODOS DE WEB SCRAPING
    // ========================================

    /**
     * Processa e valida valores extra√≠dos da tabela ICEC mantendo formato string
     * @param values Array de strings com os valores da tabela
     * @returns Objeto com os dados ICEC formatados
     */
    private processIcecTableValues(values: string[]): any {
        console.log('üîÑ Processando valores ICEC:', values);

        if (values.length < 6) {
            throw new Error(`Dados ICEC insuficientes. Esperado: 6 valores, Encontrado: ${values.length}`);
        }

        return {
            ICEC: String(values[0] || ''),           // Mantendo como string
            AT√â_50: String(values[1] || ''),         // Mantendo como string
            MAIS_DE_50: String(values[2] || ''),     // Mantendo como string
            SEMIDURAVEIS: String(values[3] || ''),   // Mantendo como string
            NAO_DURAVEIS: String(values[4] || ''),   // Mantendo como string
            DURAVEIS: String(values[5] || '')        // Mantendo como string
        };
    }

    /**
     * Realiza autentica√ß√£o no site ICEC utilizando credenciais do ambiente
     * @param page Inst√¢ncia da p√°gina do Playwright
     */
    private async performLogin(page: any): Promise<void> {
        console.log('üîê Fazendo login no site ICEC...');

        const baseUrl = process.env.BASE_URL_SITE_ICEC || 'https://pesquisascnc.com.br/pesquisa-icec/';

        await page.goto(baseUrl);
        console.log('‚úÖ P√°gina carregada');

        // Aguardar os campos de login aparecerem
        await page.waitForSelector('#log');
        await page.waitForSelector('#pwd');

        // Preencher credenciais usando os IDs corretos
        await page.fill('#log', process.env.CREDENTIALS_USER || '');
        console.log('‚úÖ Email preenchido');

        await page.fill('#pwd', process.env.CREDENTIALS_PASSWORD || '');
        console.log('‚úÖ Senha preenchida');

        // Clicar no bot√£o de login usando o ID correto
        await page.click('#actionLogin');
        console.log('‚úÖ Login realizado');

        // Aguardar o formul√°rio de pesquisa aparecer (confirma que o login foi bem-sucedido)
        await page.waitForSelector('#formPesquisa', { timeout: 10000 });
        console.log('‚úÖ Login confirmado - formul√°rio de pesquisa carregado');
    }

    /**
     * Extrai dados ICEC do site via web scraping para um per√≠odo espec√≠fico
     * @param page Inst√¢ncia da p√°gina do Playwright
     * @param mes M√™s do per√≠odo desejado (1-12)
     * @param ano Ano do per√≠odo desejado
     * @param regiao Regi√£o dos dados (ex: 'BR', 'SP')
     * @returns Objeto Icec com dados extra√≠dos via web scraping
     */
    private async extractDataFromWebsite(page: any, mes: number, ano: number, regiao: string): Promise<Icec> {
        console.log(`üìä Extraindo dados do site ICEC para ${regiao} ${mes}/${ano}`);

        // Aguardar o formul√°rio de pesquisa estar dispon√≠vel
        await page.waitForSelector('#formPesquisa');

        // Selecionar ano
        await page.locator('#selectAno').selectOption(ano.toString());
        console.log(`‚úÖ Ano selecionado: ${ano}`);

        // Selecionar m√™s (sem zero √† esquerda)
        await page.locator('#selectMes').selectOption(mes.toString());
        console.log(`‚úÖ M√™s selecionado: ${mes}`);

        // Selecionar regi√£o/estado
        await page.locator('#selectEstado').selectOption(regiao);
        console.log(`‚úÖ Regi√£o selecionada: ${regiao}`);

        // Clicar no bot√£o Filtrar
        await page.getByRole('button', { name: 'Filtrar' }).click();
        console.log('‚úÖ Bot√£o Filtrar clicado');

        // Aguardar a tabela carregar dentro do iframe
        await page.waitForTimeout(3000);

        // Buscar a tabela dentro do iframe #dadosPesquisa
        const table = await page.frameLocator('#dadosPesquisa').getByRole('table');
        console.log('‚úÖ Tabela encontrada no iframe');

        // Aguardar um pouco mais para garantir que a tabela carregou completamente
        await page.waitForTimeout(1000);

        // Extrair dados da tabela
        const tableData = await this.extractCompleteTableData(page, mes, ano);

        const icecData: Icec = {
            MES: mes,
            ANO: ano,
            REGIAO: regiao as Regiao,
            METODO: Metodo.WS,
            ICEC: tableData.ICEC,
            AT√â_50: tableData.AT√â_50,
            MAIS_DE_50: tableData.MAIS_DE_50,
            SEMIDURAVEIS: tableData.SEMIDURAVEIS,
            NAO_DURAVEIS: tableData.NAO_DURAVEIS,
            DURAVEIS: tableData.DURAVEIS
        };

        console.log('üìà Dados extra√≠dos:', tableData);
        return icecData;
    }

    /**
     * Extrai e processa dados espec√≠ficos da tabela ICEC no site
     * @param page Inst√¢ncia da p√°gina do Playwright
     * @param mes M√™s do per√≠odo para localiza√ß√£o na tabela
     * @param ano Ano do per√≠odo para localiza√ß√£o na tabela
     * @returns Dados processados da tabela ICEC
     */
    private async extractCompleteTableData(page: any, mes: number, ano: number): Promise<any> {
        // Mapear m√™s para formato abreviado em ingl√™s (JUL 25)
        const meses = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];
        const mesAbrev = meses[mes - 1];
        const anoAbrev = ano.toString().slice(-2); // Pegar √∫ltimos 2 d√≠gitos
        const periodoTarget = `${mesAbrev} ${anoAbrev}`;

        console.log(`üîç Procurando per√≠odo ICEC: ${periodoTarget}`);

        try {
            // Usar abordagem similar ao c√≥digo do PEIC
            const table = await page.frameLocator('#dadosPesquisa').getByRole('table');
            const rows = await table.locator('tr');

            // Extrair todos os dados da tabela
            const data = await rows.allInnerTexts();
            console.log(`‚úÖ Dados extra√≠dos: ${data.length} linhas`);

            // Filtrar e processar os dados
            for (let i = 0; i < data.length; i++) {
                const rowData = data[i];
                if (rowData && rowData.includes(periodoTarget)) {
                    console.log(`‚úÖ Per√≠odo encontrado: ${periodoTarget}`);
                    console.log(`üìä Dados da linha: ${rowData}`);

                    // Dividir por tab ou espa√ßos m√∫ltiplos
                    const values = rowData.split(/\t+/).filter(val => val.trim() !== '');

                    console.log('üìä Valores separados:', values);

                    // Validar se temos pelo menos 7 valores (per√≠odo + 6 dados ICEC)
                    if (values.length < 7) {
                        throw new Error(`Dados insuficientes na linha. Esperado: 7+ valores, Encontrado: ${values.length}`);
                    }

                    return this.processIcecTableValues(values.slice(1)); // Pular a primeira coluna (per√≠odo)
                }
            }

            // Se n√£o encontrou o per√≠odo, mostrar per√≠odos dispon√≠veis
            console.log('üîç Per√≠odos dispon√≠veis na tabela ICEC:');
            data.forEach((rowData, index) => {
                if (rowData && rowData.trim()) {
                    const firstValue = rowData.split(/[\t\s]+/)[0];
                    if (firstValue && firstValue.match(/[A-Z]{3}\s?\d{2}/)) {
                        console.log(`  ${index}: ${firstValue}`);
                    }
                }
            });

            throw new Error(`Per√≠odo ${periodoTarget} n√£o encontrado na tabela ICEC`);

        } catch (error) {
            console.error('‚ùå Erro ao extrair dados da tabela ICEC:', error);
            throw error;
        }
    }

    /**
     * Executa tentativas de recupera√ß√£o via web scraping para per√≠odos que falharam
     * Implementa monitoramento detalhado de cada tentativa
     * @param errorList Lista de erros/per√≠odos para retry
     * @param tasks Array de tasks para atualiza√ß√£o de status
     * @returns N√∫mero de sucessos obtidos via web scraping
     */
    private async retryWithWebScrapingMonitoring(errorList: IErrorService[], tasks: ITask[]): Promise<number> {
        const browser = await chromium.launch({ headless: true });

        try {
            const page = await browser.newPage();

            // Fazer login
            await this.performLogin(page);

            let sucessosWebScraping = 0;

            for (const error of errorList) {
                try {
                    console.log(LogMessages.webScrapingInicio('ICEC', error.regiao, error.mes, error.ano));

                    const data = await this.extractDataFromWebsite(page, error.mes, error.ano, error.regiao);
                    const savedId = await this.saveIndividualIcecToDatabase(data);

                    console.log(LogMessages.webScrapingSucesso('ICEC', error.regiao, error.mes, error.ano));
                    sucessosWebScraping++;

                    // Atualizar task correspondente para sucesso
                    const taskIndex = tasks.findIndex(t =>
                        t.mes === error.mes &&
                        t.ano === error.ano &&
                        t.regiao === error.regiao &&
                        t.status === 'Falha'
                    );

                    if (taskIndex !== -1) {
                        tasks[taskIndex].status = 'Sucesso';
                        tasks[taskIndex].metodo = Metodo.WS;
                        delete tasks[taskIndex].erro;
                    }

                } catch (scrapingError) {
                    console.log(LogMessages.webScrapingFalha('ICEC', error.regiao, error.mes, error.ano, scrapingError));

                    // Atualizar erro na task
                    const taskIndex = tasks.findIndex(t =>
                        t.mes === error.mes &&
                        t.ano === error.ano &&
                        t.regiao === error.regiao &&
                        t.status === 'Falha'
                    );

                    if (taskIndex !== -1) {
                        tasks[taskIndex].erro = `Planilha: ${tasks[taskIndex].erro} | Web Scraping: ${scrapingError}`;
                    }
                }
            }

            console.log(`\n=== Resultado do Web Scraping ICEC ===`);
            console.log(`Sucessos: ${sucessosWebScraping}`);
            console.log(`Erros: ${errorList.length - sucessosWebScraping}`);
            console.log(`Total tentativas: ${errorList.length}`);

            return sucessosWebScraping;

        } finally {
            await browser.close();
        }
    }

    // ========================================
    // SE√á√ÉO 7: M√âTODO PRINCIPAL P√öBLICO
    // ========================================

    /**
     * M√©todo principal que executa o processamento completo dos dados ICEC
     * Inclui download, extra√ß√£o, salvamento individual, retry via web scraping e processamento de metadados
     * @param regioes Array de regi√µes para processamento (padr√£o: ['BR'])
     * @returns Objeto IServiceResult com estat√≠sticas completas da execu√ß√£o
     */
    public async processAllIcecDataWithMonitoring(regioes: string[] = ['BR']): Promise<IServiceResult> {
        const startTime = Date.now();
        console.log('üöÄ Iniciando processamento completo dos dados ICEC com monitoramento...\n');

        const resultadoLimpeza = await this.cleanDatabase();
        console.log(resultadoLimpeza);

        console.log(`üìç Regi√µes a processar: ${regioes.join(', ')}\n`);

        // Gerar per√≠odos automaticamente baseado no m√©todo de processamento (com detec√ß√£o de lacunas)
        const periods = await generateServicePeriodsWithGapDetection(
            'ICEC', 
            () => this.getLastIcecPeriod(),
            () => this.getAllExistingIcecPeriods()
        );

        // Verificar se h√° per√≠odos para processar
        if (periods.length === 0) {
            console.log(`üîí Nenhum per√≠odo novo para processar - dados j√° atualizados`);
            
            const endTime = Date.now();
            const tempoExecucao = calculateExecutionTime(startTime, endTime);
            
            const resultado: IServiceResult = {
                servico: 'ICEC',
                periodoInicio: 'N/A',
                periodoFim: 'N/A',
                tempoExecucao,
                tasks: [],
                totalRegistros: 0,
                registrosPlanilha: 0,
                registrosWebScraping: 0,
                sucessos: 0,
                falhas: 0
            };

            console.log(`\n=== Processamento ICEC conclu√≠do ===`);
            console.log(`Status: Nenhum per√≠odo novo para processar`);
            console.log(`Tempo: ${Math.round(tempoExecucao / 1000)} segundos`);

            return resultado;
        }

        const tasks: ITask[] = [];
        let registrosPlanilha = 0;
        let registrosWebScraping = 0;
        let erros: IErrorService[] = [];
        let savedIds: string[] = [];

        for (const period of periods) {
            for (const regiao of regioes) {

                try {
                    console.log(LogMessages.processando('ICEC', regiao, period.mes, period.ano));

                    const currentUrl = this.buildUrl(period.mes, period.ano, regiao);
                    const currentFilePath = await this.downloadExcelFile(currentUrl, `${regiao}_${period.mes}${period.ano}`);

                    // Validar layout da planilha
                    const layoutValidation = await this.isExcelLayoutValid(currentFilePath);
                    const layoutStatus = layoutValidation.valid ? 'padr√£o' : 'inconsistente';
                    const inconsistenciaLayout = layoutValidation.inconsistencies;

                    // Extrair dados completos diretamente da planilha
                    const completeData = await this.extractCompleteDataFromExcel(currentFilePath);
                    completeData.MES = period.mes;
                    completeData.ANO = period.ano;
                    completeData.REGIAO = regiao as Regiao;
                    completeData.METODO = Metodo.PLA;

                    // Salvar registro individual no banco de dados
                    const savedId = await this.saveIndividualIcecToDatabase(completeData);
                    savedIds.push(savedId);
                    registrosPlanilha++;

                    tasks.push({
                        mes: period.mes,
                        ano: period.ano,
                        regiao,
                        status: 'Sucesso',
                        servico: 'ICEC',
                        metodo: Metodo.PLA,
                        layout: layoutStatus,
                        inconsistenciaLayout: inconsistenciaLayout
                    });

                    console.log(LogMessages.sucesso('ICEC', regiao, period.mes, period.ano));

                } catch (error) {

                    console.log(LogMessages.erro('ICEC', regiao, period.mes, period.ano, error));

                    erros.push({
                        regiao,
                        mes: period.mes,
                        ano: period.ano
                    });

                    tasks.push({
                        mes: period.mes,
                        ano: period.ano,
                        regiao,
                        status: 'Falha',
                        servico: 'ICEC',
                        metodo: Metodo.PLA,
                        erro: String(error)
                    });
                }
            }
        }

        // Segunda tentativa com web scraping para os erros
        if (erros.length > 0) {
            console.log(`\nüîÑ Iniciando segunda tentativa com web scraping para ${erros.length} per√≠odos...`);
            const sucessosWebScraping = await this.retryWithWebScrapingMonitoring(erros, tasks);
            registrosWebScraping = sucessosWebScraping;
        }

        // Processar metadados para registros do tipo Planilha
        if (savedIds.length) {
            console.log('\nüîÑ Iniciando processamento de metadados ICEC...');
            await this.processMetadataForPlanilhaRecords(savedIds);
        }

        const endTime = Date.now();
        const tempoExecucao = calculateExecutionTime(startTime, endTime);

        const { sucessos, falhas } = calculateTaskStats(tasks);

        // Extrair per√≠odos dinamicamente
        const { periodoInicio, periodoFim } = extractServicePeriodRange(periods);

        const resultado: IServiceResult = {
            servico: 'ICEC',
            periodoInicio,
            periodoFim,
            tempoExecucao,
            tasks,
            totalRegistros: tasks.length, // Total geral (sucessos + falhas)
            registrosPlanilha,
            registrosWebScraping,
            sucessos,
            falhas
        };

        console.log(`\n=== Processamento ICEC conclu√≠do ===`);
        console.log(`Sucessos: ${sucessos}`);
        console.log(`Falhas: ${falhas}`);
        console.log(`Tempo: ${Math.round(tempoExecucao / 60)} minutos`);
        console.log(`Registros por planilha: ${registrosPlanilha}`);
        console.log(`Registros por web scraping: ${registrosWebScraping}`);

        // Limpeza da pasta temp ao final da execu√ß√£o
        await cleanupServiceTempFolder('icec', this.TEMP_DIR);

        return resultado;
    }
}