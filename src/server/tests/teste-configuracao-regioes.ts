/**
 * Teste para verificar a configura√ß√£o de regi√µes atrav√©s do .env
 */

import * as dotenv from 'dotenv';
import { getServiceRegions } from '../shared/utils';

// Carregar vari√°veis de ambiente
dotenv.config();

async function testServiceRegions() {
    console.log('üß™ === TESTE DE CONFIGURA√á√ÉO DE REGI√ïES ===\n');

    // Testar configura√ß√£o para cada servi√ßo
    const services: Array<'ICF' | 'ICEC' | 'PEIC'> = ['ICF', 'ICEC', 'PEIC'];

    for (const service of services) {
        console.log(`üìä Testando ${service}:`);
        
        try {
            const regioes = getServiceRegions(service);
            console.log(`   ‚úÖ Regi√µes obtidas: [${regioes.join(', ')}]`);
            console.log(`   üìç Total de regi√µes: ${regioes.length}`);
            
            // Verificar se h√° duplicatas
            const regioesUnicas = [...new Set(regioes)];
            if (regioesUnicas.length !== regioes.length) {
                console.log(`   ‚ö†Ô∏è Aten√ß√£o: Foram encontradas regi√µes duplicadas!`);
                console.log(`   üîç Regi√µes √∫nicas: [${regioesUnicas.join(', ')}]`);
            }
            
        } catch (error) {
            console.log(`   ‚ùå Erro ao obter regi√µes: ${error}`);
        }
        
        console.log(''); // Linha em branco
    }

    console.log('üìã === VALORES NO .ENV ===');
    console.log(`   REGIONS_ICF: "${process.env.REGIONS_ICF || 'n√£o definido'}"`);
    console.log(`   REGIONS_ICEC: "${process.env.REGIONS_ICEC || 'n√£o definido'}"`);
    console.log(`   REGIONS_PEIC: "${process.env.REGIONS_PEIC || 'n√£o definido'}"`);
    
    console.log('\n‚úÖ Teste de configura√ß√£o de regi√µes conclu√≠do!');
}

// Executar o teste
testServiceRegions().catch(console.error);
