#!/bin/bash
# =================================================================
# SCRIPT DE DEPLOYMENT - SISTEMA CNC
# =================================================================
# Facilita o deployment e gerenciamento do sistema via Docker

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√µes auxiliares
print_header() {
    echo -e "${BLUE}=================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}=================================${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se Docker est√° instalado
check_docker() {
    if ! command -v docker &> /dev/null; then
        print_error "Docker n√£o est√° instalado!"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose n√£o est√° instalado!"
        exit 1
    fi
    
    print_success "Docker e Docker Compose encontrados"
}

# Verificar arquivo .env
check_env() {
    if [ ! -f ".env" ]; then
        print_warning "Arquivo .env n√£o encontrado!"
        echo "Copiando .env.docker.example para .env..."
        cp .env.docker.example .env
        print_warning "IMPORTANTE: Edite o arquivo .env com suas configura√ß√µes!"
        echo "Pressione Enter para continuar..."
        read
    fi
    print_success "Arquivo .env encontrado"
}

# Criar diret√≥rios necess√°rios
create_dirs() {
    mkdir -p logs temp
    print_success "Diret√≥rios criados: logs/, temp/"
}

# Build da aplica√ß√£o
build_app() {
    print_header "BUILDING APLICA√á√ÉO CNC"
    docker-compose build --no-cache cnc-app
    print_success "Build conclu√≠do"
}

# Iniciar servi√ßos
start_services() {
    print_header "INICIANDO SERVI√áOS"
    docker-compose up -d
    print_success "Servi√ßos iniciados"
    
    echo ""
    print_header "STATUS DOS SERVI√áOS"
    docker-compose ps
}

# Parar servi√ßos
stop_services() {
    print_header "PARANDO SERVI√áOS"
    docker-compose down
    print_success "Servi√ßos parados"
}

# Logs da aplica√ß√£o
show_logs() {
    print_header "LOGS DA APLICA√á√ÉO CNC"
    docker-compose logs -f cnc-app
}

# Status dos servi√ßos
show_status() {
    print_header "STATUS DOS SERVI√áOS"
    docker-compose ps
    
    echo ""
    print_header "HEALTH CHECK"
    docker-compose exec cnc-app node -e "console.log('CNC System: OK')" 2>/dev/null && print_success "Aplica√ß√£o CNC: Healthy" || print_warning "Aplica√ß√£o CNC: N√£o dispon√≠vel"
    docker-compose exec mysql mysqladmin ping -h localhost --silent && print_success "MySQL: Healthy" || print_warning "MySQL: N√£o dispon√≠vel"
}

# Backup do banco
backup_database() {
    print_header "BACKUP DO BANCO DE DADOS"
    BACKUP_FILE="backup_cnc_$(date +%Y%m%d_%H%M%S).sql"
    docker-compose exec mysql mysqldump -u root -p cnc > "$BACKUP_FILE"
    print_success "Backup salvo em: $BACKUP_FILE"
}

# Executar migra√ß√£o
run_migration() {
    print_header "EXECUTANDO MIGRA√á√ïES"
    docker-compose exec cnc-app npm run migration:run
    print_success "Migra√ß√µes executadas"
}

# For√ßar execu√ß√£o
force_execution() {
    print_header "FOR√áANDO EXECU√á√ÉO CNC"
    docker-compose exec cnc-app npm run force
    print_success "Execu√ß√£o for√ßada conclu√≠da"
}

# Menu principal
show_menu() {
    echo ""
    print_header "SISTEMA CNC - GERENCIAMENTO DOCKER"
    echo "1) üöÄ Deploy completo (build + start)"
    echo "2) üî® Build aplica√ß√£o"
    echo "3) ‚ñ∂Ô∏è  Iniciar servi√ßos"
    echo "4) ‚èπÔ∏è  Parar servi√ßos"
    echo "5) üìã Ver logs"
    echo "6) üìä Status dos servi√ßos"
    echo "7) üíæ Backup banco de dados"
    echo "8) üîÑ Executar migra√ß√µes"
    echo "9) ‚ö° For√ßar execu√ß√£o CNC"
    echo "0) üö™ Sair"
    echo ""
    read -p "Escolha uma op√ß√£o: " choice
}

# Main script
main() {
    check_docker
    
    case $1 in
        "deploy")
            check_env
            create_dirs
            build_app
            start_services
            ;;
        "build")
            build_app
            ;;
        "start")
            start_services
            ;;
        "stop")
            stop_services
            ;;
        "logs")
            show_logs
            ;;
        "status")
            show_status
            ;;
        "backup")
            backup_database
            ;;
        "migrate")
            run_migration
            ;;
        "force")
            force_execution
            ;;
        *)
            while true; do
                show_menu
                case $choice in
                    1)
                        check_env
                        create_dirs
                        build_app
                        start_services
                        ;;
                    2)
                        build_app
                        ;;
                    3)
                        start_services
                        ;;
                    4)
                        stop_services
                        ;;
                    5)
                        show_logs
                        ;;
                    6)
                        show_status
                        ;;
                    7)
                        backup_database
                        ;;
                    8)
                        run_migration
                        ;;
                    9)
                        force_execution
                        ;;
                    0)
                        print_success "At√© logo!"
                        exit 0
                        ;;
                    *)
                        print_error "Op√ß√£o inv√°lida!"
                        ;;
                esac
                echo ""
                read -p "Pressione Enter para continuar..."
            done
            ;;
    esac
}

# Executar script
main $1